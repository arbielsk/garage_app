// Mocks generated by Mockito 5.0.7 from annotations
// in garage_app/test/bloc/vehicle_state_bloc/vehicle_state_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:garage_app/model/vehicle_state.dart' as _i2;
import 'package:garage_app/repository/vehicle_state_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeVehicleState extends _i1.Fake implements _i2.VehicleState {}

/// A class which mocks [VehicleStateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehicleStateRepository extends _i1.Mock
    implements _i3.VehicleStateRepository {
  MockVehicleStateRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.VehicleState> streamVehicleState(String? vin) =>
      (super.noSuchMethod(Invocation.method(#streamVehicleState, [vin]),
              returnValue: Stream<_i2.VehicleState>.empty())
          as _i4.Stream<_i2.VehicleState>);
  @override
  _i4.Future<_i2.VehicleState> getVehicleState(String? vin) =>
      (super.noSuchMethod(Invocation.method(#getVehicleState, [vin]),
              returnValue: Future<_i2.VehicleState>.value(_FakeVehicleState()))
          as _i4.Future<_i2.VehicleState>);
  @override
  void updateVehicleState(String? vin, _i2.VehicleState? vehicleState) => super
      .noSuchMethod(Invocation.method(#updateVehicleState, [vin, vehicleState]),
          returnValueForMissingStub: null);
}
